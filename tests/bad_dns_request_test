#!/usr/bin/perl

use strict;
use warnings;
use TestUtils;
use TestHTTPD;
use File::Temp;
use IO::Socket::INET;

my $bad_requests = [
    "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n", # Test bad name server
    "GET / HTTP/1.1\r\nHost: ...........\r\n\r\n", # Invalid hostname
    "PUT / HTTP/1.1\r\nHost: example.com\r\nContent-Length: 65536\r\n\r\n" . 'x' x 65536, # Exceed buffer size
    "GET / HTTP/1.1\r\nHost: \0example.com\r\n\r\n", # Invalid hostname
];

sub http_client($$) {
    my $port = shift;
    my $request = shift;

    my $socket = IO::Socket::INET->new(PeerAddr => '127.0.0.1',
                                       PeerPort => $port,
                                       Proto => "tcp",
                                       Type => SOCK_STREAM)
        or die "couldn't connect $!";

    $socket->send($request);

    my $buffer;
    $socket->recv($buffer, 4096);

    $socket->close();

    return undef;
}
sub proxy {
    my $config = shift;

    # Use an RFC1166 documentation prefix IP address as the nameserver
    # this should be not respond to DNS queries in any environment
    $ENV{'NAMESERVERS'} = "192.0.2.99";
    exec(@_, '../src/sniproxy', '-f', '-c', $config);
}


sub worker($$$) {
    my ($port, $requests, $offset) = @_;

    for (my $i = 0; $i < $requests; $i++) {
        my $error = http_client($port, $bad_requests->[($i + $offset) % int(@$bad_requests)]);

        die($error) if defined $error;
    }
    # Success
    exit 0;
}

sub make_wildcard_config($) {
    my $proxy_port = shift;

    my ($fh, $filename) = File::Temp::tempfile();

    # Write out a test config file
    print $fh <<END;
# Minimal test configuration

listen 127.0.0.1 $proxy_port {
    proto http
}

table {
    .* *:80
}
END

    close ($fh);

    return $filename;
}

sub main {
    my $proxy_port = $ENV{SNI_PROXY_PORT} || 8080;
    my $workers = $ENV{WORKERS} || 3;
    my $iterations = $ENV{ITERATIONS} || 5;

    my $config = make_wildcard_config($proxy_port);
    my $proxy_pid = start_child('server', \&proxy, $config, @ARGV);

    # Wait for proxy to load and parse config
    wait_for_port($proxy_port);

    for (my $i = 0; $i < $workers; $i++) {
        start_child('worker', \&worker, $proxy_port, $iterations, $i);
    }

    # Wait for all our children to finish
    wait_for_type('worker');

    # Give the proxy a second to flush buffers and close server connections
    sleep 1;

    # For troubleshooting connections stuck in CLOSE_WAIT state
    #kill 10, $proxy_pid;
    #system("netstat -ptn | grep $proxy_pid\/sniproxy");

    # For troubleshooting 100% CPU usage
    #system("top -n 1 -p $proxy_pid -b");

    # Orderly shutdown of the server
    kill 15, $proxy_pid;
    sleep 1;

    # Delete our test configuration
    unlink($config);

    # Kill off any remaining children
    reap_children();
}

main();
